// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // ALU Combinational Logic

    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=decodedInstr);

    // The control bit for A will be '1' when there's either an A-instruction, or if
    // the A dest bit (5) is activated in case of a C-instruction
    And(a=instruction[5], b=instruction[15], out=activAOne);
    Not(in=instruction[15], out=notInstBit);
    Or(a=notInstBit, b=activAOne, out=activABit);

    And(a=instruction[4], b=instruction[15], out=activDBit); // Control bit to load the D Register
    And(a=instruction[3], b=instruction[15], out=writeM); // Control bit to write to M Register

    ARegister(in=decodedInstr, load=activABit, out=AReg);
    DRegister(in=ALUOut, load=activDBit, out=DReg);

    Mux16(a=AReg, b=inM, sel=instruction[12], out=AMuxM);

    ALU(x=DReg, y=AMuxM, zx=instruction[11], nx=instruction[10],
    zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
    out=ALUOut, zr=outZeroed, ng=outNeg);

    And16(a=true, b=ALUOut, out=outM);
    And16(a=AReg, b=true, out[0..14]=addressM);

    // Program Counter Logic

    // Doing this to shorten the amount I have to type
    And(a=instruction[0], b=true, out=Zero);
    And(a=instruction[1], b=true, out=One);
    And(a=instruction[2], b=true, out=Two);
    And(a=instruction[15], b=true, out=activ);

    Not(in=outZeroed, out=notOutZeroed);
    Not(in=outNeg, out=notOutNeg);

    Not(in=instruction[0], out=notZero);
    Not(in=instruction[1], out=notOne);
    Not(in=instruction[2], out=notTwo);

    // The logic begins here    

    And4Way(a=Zero, b=notOne, c=notTwo, d=activ, out=JGT); // Jump If > 0
    And4Way(a=notZero, b=One, c=notTwo, d=activ, out=JEQ); // Jump If = 0
    And4Way(a=Zero, b=One, c=notTwo, d=activ, out=JGE); // Jump if >= 0
    And4Way(a=notZero, b=notOne, c=Two, d=activ, out=JLT); // Jump if < 0
    And4Way(a=Zero, b=notOne, c=Two, d=activ, out=JNE); // Jump if != 0
    And4Way(a=notZero, b=One, c=Two, d=activ, out=JLE); // Jump if <= 0

    And4Way(a=Zero, b=One, c=Two, d=activ, out=alwaysJump); // Unconditional Jump

    And4Way(a=JGT, b=notOutZeroed, c=notOutNeg, d=true, out=loadOne);
    And4Way(a=JEQ, b=outZeroed, c=notOutNeg, d=true, out=loadTwo);

    And(a=JGE, b=notOutNeg, out=loadThree);

    And4Way(a=JLT, b=notOutZeroed, c=outNeg, d=true, out=loadFour);
    And(a=JNE, b=notOutZeroed, out=loadFive);

    Or(a=outZeroed, b=outNeg, out=LEControl);
    And(a=JLE, b=LEControl, out=loadSix);

    Mux(a=false, b=JGT, sel=loadOne, out=muxLoadOne);
    Mux(a=muxLoadOne, b=JEQ, sel=loadTwo, out=muxLoadTwo);
    Mux(a=muxLoadTwo, b=JGE, sel=loadThree, out=muxLoadThree);
    Mux(a=muxLoadThree, b=JLT, sel=loadFour, out=muxLoadFour);
    Mux(a=muxLoadFour, b=JNE, sel=loadFive, out=muxLoadFive);
    Mux(a=muxLoadFive, b=JLE, sel=loadSix, out=muxLoadSix);
    Mux(a=muxLoadSix, b=true, sel=alwaysJump, out=loadBit);

    Not(in=loadBit, out=incBit); // If the PC doesn't jump, then it'll increment.

    PC(in=AReg, load=loadBit, inc=incBit, reset=reset, out[0..14]=pc);
}